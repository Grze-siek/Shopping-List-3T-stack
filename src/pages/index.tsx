import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import { useEffect, useLayoutEffect, useState } from "react";
import { ShoppingItem } from "@prisma/client";
import ItemModal from "~/components/ItemModal";
import { HiX } from "react-icons/hi";
import { motion } from "framer-motion";
import Cookies from "js-cookie";

const Home: NextPage = () => {
  const [items, setItems] = useState<ShoppingItem[]>([]);
  const [checkedItems, setCheckedItems] = useState<ShoppingItem[]>([]);
  const [modalOpen, setModalOpen] = useState<boolean>(false);
  const {
    data: itemsData,
    isLoading,
    refetch,
  } = api.item.getAllItems.useQuery(undefined, {
    onSuccess: (shoppingItems) => {
      setItems(shoppingItems);
      const checked = shoppingItems.filter((item) => item.checked);
      setCheckedItems(checked);
    },
  });

  const { mutate: deleteItem } = api.item.deleteItem.useMutation({
    onSuccess(shoppingItem) {
      setItems((prev) => prev.filter((item) => item.id !== shoppingItem.id));
      refetch();
    },
  });

  const { mutate: toggleCheck } = api.item.toggleChecked.useMutation({
    onSuccess(shoppingItem) {
      if (checkedItems.some((item) => item.id === shoppingItem.id)) {
        setCheckedItems((prev) =>
          prev.filter((item) => item.id !== shoppingItem.id)
        );
      } else {
        setCheckedItems((prev) => [...prev, shoppingItem]);
      }
    },
  });

  // useEffect(() => {
  //   Cookies.set("checkedItems", JSON.stringify(checkedItems));
  // }, [checkedItems]);

  // useEffect(() => {
  //   const savedCheckedItems = Cookies.get("checkedItems");
  //   if (savedCheckedItems) {
  //     setCheckedItems(JSON.parse(savedCheckedItems));
  //   }
  // }, []);

  if (!itemsData || isLoading) return <p>Loading...</p>;

  return (
    <>
      <Head>
        <title>Shopping list app</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {modalOpen && (
        <ItemModal
          setModalOpen={setModalOpen}
          setItems={setItems}
          refetch={refetch}
        />
      )}

      <main className="my-12 mx-auto max-w-2xl">
        <div className="flex justify-between">
          <h2 className="text-2xl font-semibold">My Shopping List</h2>
          <button
            type="button"
            onClick={() => setModalOpen(true)}
            className="rounded-md bg-green-300 px-4 py-2 transition duration-200 ease-in-out hover:bg-green-400"
          >
            Add shopping item
          </button>
        </div>
        <ul className="mt-4 space-y-2 text-lg">
          {itemsData.map((item) => {
            const { id, name } = item;
            return (
              <li key={item.id} className="flex items-center justify-between">
                <div className="relative">
                  <div className="pointer-events-none absolute inset-0 flex origin-left items-center justify-center">
                    <motion.div
                      initial={{ width: 0 }}
                      animate={{
                        width: checkedItems.some((item) => item.id === id)
                          ? "100%"
                          : 0,
                      }}
                      transition={{ duration: 0.2, ease: "easeInOut" }}
                      className="h-[2px] w-full translate-y-px bg-red-500"
                    />
                  </div>
                  <span
                    onClick={() =>
                      toggleCheck({
                        id,
                        checked: checkedItems.some((item) => item.id === id)
                          ? false
                          : true,
                      })
                    }
                  >
                    {item.name}
                  </span>
                </div>
                <HiX
                  onClick={() => deleteItem({ id })}
                  className="h-6 w-6 cursor-pointer text-red-500 transition hover:scale-110"
                />
              </li>
            );
          })}
        </ul>
      </main>
    </>
  );
};

export default Home;
